load("@io_bazel_rules_scala//scala:scala_toolchain.bzl", "scala_toolchain")
load("@constants//:vars.bzl", "SCALA_VERSION_SUFFIX")
load("@io_bazel_rules_scala//scala:scala.bzl", "scala_binary","scala_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("//:tailwindcss.bzl", "tailwindcss")
load("@bazel_skylib//lib:selects.bzl", "selects")

selects.config_setting_group(
    name = "linux_x86_64",
    match_all = ["@platforms//os:linux", "@platforms//cpu:x86_64"],
)

selects.config_setting_group(
    name = "macos_arm64",
    match_all = ["@platforms//os:macos", "@platforms//cpu:arm64"],
)

# Need to run this target because metals seems to default to using a version that
# breaks auto fix context actions (at least in Metals 1.3.1)
java_binary(
    name = "bazel_bsp",
    main_class = "org.jetbrains.bsp.bazel.install.Install",
    runtime_deps = ["@mvn//:org_jetbrains_bsp_bazel_bsp"],
)

scala_toolchain(
    name = "semanticdb_toolchain_impl",
    # scalac needs access to transitive deps
    # at compile time or it'll fail mysteriously.
    dependency_mode = "transitive",
    # Seems to work, but not sure the cost of this vs regular AST mode
    dependency_tracking_method = "ast-plus",
    enable_semanticdb = True,
    semanticdb_bundle_in_jar = False,
    strict_deps_mode = "error",
    # Could use a `select` to make it warn in dev mode and error in prod/ci
    unused_dependency_checker_mode = "error",
    visibility = ["//visibility:public"],
)

toolchain(
    name = "semanticdb_toolchain",
    toolchain = "semanticdb_toolchain_impl",
    toolchain_type = "@io_bazel_rules_scala//scala:toolchain_type",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "scala_src",
    srcs = glob(["**/*.scala"]),
)

filegroup(
    name = "tailwind_config",
    srcs = ["tailwind.config.js"],
)

filegroup(
    name = "tailwind_input_css",
    srcs = ["src/input.css"],
)

tailwindcss(
    name = "style",
    src = "//:tailwind_input_css",  # Your input CSS file with Tailwind directives
    target = "//:scala_src",  # The target containing your Scala source files
    binary = select({
        "//:linux_x86_64": "@tailwindcss_linux_x86_64//file",
        "//:macos_arm64": "@tailwindcss_macos_arm//file",
    }),
)

filegroup(
    name = "all_resources",
    srcs = glob(["src/main/resources/**/*"]),  # includes all files and subdirectories in resources
    visibility = ["//visibility:public"],
)

scala_library(
    name = "app_lib",
    srcs = glob(["src/main/scala/**/*.scala"]),
    visibility = ["//visibility:public"],
    deps = [
    "@mvn//:dev_zio_zio_logging_{}".format(SCALA_VERSION_SUFFIX),
    "@mvn//:dev_zio_zio_logging_slf4j_{}".format(SCALA_VERSION_SUFFIX),
    "@mvn//:dev_zio_zio_config_magnolia_{}".format(SCALA_VERSION_SUFFIX),
    "@mvn//:dev_zio_zio_{}".format(SCALA_VERSION_SUFFIX),
    "@mvn//:dev_zio_zio_http_{}".format(SCALA_VERSION_SUFFIX),
    "@mvn//:dev_zio_zio_config_typesafe_{}".format(SCALA_VERSION_SUFFIX),
    "@mvn//:com_zaxxer_HikariCP",
    "@mvn//:io_getquill_quill_jdbc_zio_{}".format(SCALA_VERSION_SUFFIX),
    "@mvn//:com_lihaoyi_scalatags_{}".format(SCALA_VERSION_SUFFIX),
    "@mvn//:org_flywaydb_flyway_core",
    "@mvn//:ch_qos_logback_logback_classic",
    "@mvn//:org_xerial_sqlite_jdbc",

  ]
)

scala_binary(
    name = "app",
    srcs = ["src/main/scala/com/rockthejvm/Main.scala"],
    main_class = "com.rockthejvm.Main",
  resources = [":all_resources",":style"],
    deps = [":app_lib"],
)

pkg_tar(
    name = "layer",
    srcs = [":app_deploy.jar"],
    package_dir = "/",
)

oci_image(
    name = "image",
    base = "@distroless_java",
    entrypoint = ["java", "-jar", "/app_deploy.jar"],
    tars = [":layer"],
)

oci_tarball(
    name = "tarball",
    image = ":image",
    repo_tags = ["scala-site:latest"],
    
)

